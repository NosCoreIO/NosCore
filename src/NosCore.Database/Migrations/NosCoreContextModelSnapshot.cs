// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using NosCore.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NosCore.Database.Migrations
{
    [DbContext(typeof(NosCoreContext))]
    partial class NosCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "audit_log_type", new[] { "account_creation", "character_creation", "email_update" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "authority_type", new[] { "user", "moderator", "game_master", "administrator", "root", "closed", "banned", "unconfirmed" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "character_class_type", new[] { "adventurer", "swordsman", "archer", "mage", "martial_artist" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "character_relation_type", new[] { "friend", "hidden_spouse", "spouse", "blocked" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "character_state", new[] { "active", "inactive" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "element_type", new[] { "neutral", "fire", "water", "light", "dark" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "equipment_type", new[] { "main_weapon", "armor", "hat", "gloves", "boots", "secondary_weapon", "necklace", "ring", "bracelet", "mask", "fairy", "amulet", "sp", "costume_suit", "costume_hat", "weapon_skin", "wing_skin" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "family_authority", new[] { "head", "assistant", "manager", "member" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "family_authority_type", new[] { "none", "put", "all" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "family_log_type", new[] { "daily_message", "raid_won", "rainbow_battle", "family_xp", "family_level_up", "level_up", "item_upgraded", "right_changed", "authority_changed", "family_managed", "user_managed", "ware_house_added", "ware_house_removed" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "family_member_rank", new[] { "nothing", "old_uncle", "old_aunt", "father", "mother", "uncle", "aunt", "brother", "sister", "spouse", "brother2", "sister2", "old_son", "old_daugter", "middle_son", "middle_daughter", "young_son", "young_daugter", "old_little_son", "old_little_daughter", "little_son", "little_daughter", "middle_little_son", "middle_little_daugter" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender_type", new[] { "male", "female" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "hair_color_type", new[] { "dark_purple", "yellow", "blue", "purple", "orange", "brown", "green", "dark_grey", "light_blue", "pink_red", "light_yellow", "light_pink", "light_green", "light_grey", "sky_blue", "black", "dark_orange", "dark_orange_variant2", "dark_orange_variant3", "dark_orange_variant4", "dark_orange_variant5", "dark_orange_variant6", "light_orange", "light_light_orange", "light_light_light_orange", "light_light_light_light_orange", "super_light_orange", "dark_yellow", "light_light_yellow", "kaki_yellow", "super_light_yellow", "super_light_yellow2", "super_light_yellow3", "little_dark_yellow", "yellow_variant", "yellow_variant1", "yellow_variant2", "yellow_variant3", "yellow_variant4", "yellow_variant5", "yellow_variant6", "yellow_variant7", "yellow_variant8", "yellow_variant9", "green_variant", "green_variant1", "dark_green_variant", "green_more_dark_variant", "green_variant2", "green_variant3", "green_variant4", "green_variant5", "green_variant6", "green_variant7", "green_variant8", "green_variant9", "green_variant10", "green_variant11", "green_variant12", "green_variant13", "green_variant14", "green_variant15", "green_variant16", "green_variant17", "green_variant18", "green_variant19", "green_variant20", "light_blue_variant1", "light_blue_variant2", "light_blue_variant3", "light_blue_variant4", "light_blue_variant5", "light_blue_variant6", "light_blue_variant7", "light_blue_variant8", "light_blue_variant9", "light_blue_variant10", "light_blue_variant11", "light_blue_variant12", "light_blue_variant13", "dark_black", "light_blue_variant14", "light_blue_variant15", "light_blue_variant16", "light_blue_variant17", "blue_variant", "blue_variant_dark", "blue_variant_dark_dark", "blue_variant_dark_dark2", "flash_blue", "flash_blue_dark", "flash_blue_dark2", "flash_blue_dark3", "flash_blue_dark4", "flash_blue_dark5", "flash_blue_dark6", "flash_blue_dark7", "flash_blue_dark8", "flash_blue_dark9", "white", "flash_blue_dark10", "flash_blue1", "flash_blue2", "flash_blue3", "flash_blue4", "flash_blue5", "flash_purple", "flash_light_purple", "flash_light_purple2", "flash_light_purple3", "flash_light_purple4", "flash_light_purple5", "light_purple", "purple_variant1", "purple_variant2", "purple_variant3", "purple_variant4", "purple_variant5", "purple_variant6", "purple_variant7", "purple_variant8", "purple_variant9", "purple_variant10", "purple_variant11", "purple_variant12", "purple_variant13", "purple_variant14", "purple_variant15" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "hair_style_type", new[] { "hair_style_a", "hair_style_b", "hair_style_c", "hair_style_d", "no_hair" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_effect_type", new[] { "no_effect", "teleport", "apply_hair_die", "speaker", "marriage_proposal", "undefined", "sp_charger", "dropped_sp_recharger", "premium_sp_recharger", "crafted_sp_recharger", "specialist_medal", "apply_skin_partner", "change_gender", "point_initialisation", "sealed_tarot_card", "tarot_card", "red_amulet", "blue_amulet", "reinforcement_amulet", "heroic", "random_heroic", "attack_amulet", "defense_amulet", "speed_booster", "box_effect", "vehicle", "gold_nos_merchant_upgrade", "silver_nos_merchant_upgrade", "inventory_upgrade", "pet_space_upgrade", "pet_basket_upgrade", "pet_backpack_upgrade", "inventory_ticket_upgrade", "buff_potions", "marriage_separation" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_type", new[] { "weapon", "armor", "fashion", "jewelery", "specialist", "box", "shell", "main", "upgrade", "production", "map", "special", "potion", "event", "title", "quest1", "sell", "food", "snack", "magical", "part", "teacher", "ammo", "quest2", "house", "garden", "minigame", "terrace", "miniland_theme" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "mate_type", new[] { "partner", "pet" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "miniland_state", new[] { "open", "private", "lock" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "monster_type", new[] { "unknown", "partner", "npc", "well", "portal", "boss", "elite", "peapod", "special", "gem_space_time" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "noscore_pocket_type", new[] { "equipment", "main", "etc", "miniland", "specialist", "costume", "wear" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "penalty_type", new[] { "muted", "banned", "block_exp", "block_f_exp", "block_rep", "warning" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "portal_type", new[] { "ts_normal", "closed", "open", "miniland", "ts_end", "ts_end_closed", "exit", "exit_closed", "raid", "effect", "blue_raid", "dark_raid", "time_space", "shop_teleport", "map_portal" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "quest_type", new[] { "hunt", "special_collect", "collect_in_raid", "brings", "capture_without_getting_the_monster", "capture", "times_space", "product", "number_of_kill", "target_reput", "ts_point", "dialog1", "collect_in_ts", "required", "wear", "needed", "collect", "transmit_gold", "go_to", "collect_map_entity", "use", "dialog2", "un_know", "inspect", "win_raid", "flower_quest" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "region_type", new[] { "en", "de", "fr", "it", "pl", "es", "ru", "cs", "tr" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "scripted_instance_type", new[] { "time_space", "raid", "raid_act4" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "static_bonus_type", new[] { "bazaar_medal_gold", "bazaar_medal_silver", "back_pack", "pet_basket", "pet_back_pack", "inventory_ticket_upgrade" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "teleporter_type", new[] { "teleporter", "teleporter_on_map" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "warehouse_type", new[] { "warehouse", "family_ware_house", "pet_warehouse" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NosCore.Database.Entities.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AccountId"));

                    b.Property<short>("Authority")
                        .HasColumnType("smallint");

                    b.Property<long>("BankMoney")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("ItemShopMoney")
                        .HasColumnType("bigint");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("MfaSecret")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NewAuthPassword")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NewAuthSalt")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RegistrationIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("AccountId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Act", b =>
                {
                    b.Property<byte>("ActId")
                        .HasColumnType("smallint");

                    b.Property<byte>("Scene")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ActId");

                    b.ToTable("Act");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ActPart", b =>
                {
                    b.Property<byte>("ActPartId")
                        .HasColumnType("smallint");

                    b.Property<byte>("ActId")
                        .HasColumnType("smallint");

                    b.Property<byte>("ActPartNumber")
                        .HasColumnType("smallint");

                    b.Property<byte>("MaxTs")
                        .HasColumnType("smallint");

                    b.HasKey("ActPartId");

                    b.HasIndex("ActId");

                    b.ToTable("ActPart");
                });

            modelBuilder.Entity("NosCore.Database.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuditLogType")
                        .HasColumnType("integer");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Instant>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AuditId");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("NosCore.Database.Entities.BazaarItem", b =>
                {
                    b.Property<long>("BazaarItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BazaarItemId"));

                    b.Property<short>("Amount")
                        .HasColumnType("smallint");

                    b.Property<Instant>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Duration")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsPackage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ItemInstanceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("MedalUsed")
                        .HasColumnType("boolean");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("BazaarItemId");

                    b.HasIndex("ItemInstanceId");

                    b.HasIndex("SellerId");

                    b.ToTable("BazaarItem");
                });

            modelBuilder.Entity("NosCore.Database.Entities.BCard", b =>
                {
                    b.Property<short>("BCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("BCardId"));

                    b.Property<short?>("CardId")
                        .HasColumnType("smallint");

                    b.Property<byte>("CastType")
                        .HasColumnType("smallint");

                    b.Property<int>("FirstData")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLevelDivided")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLevelScaled")
                        .HasColumnType("boolean");

                    b.Property<short?>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short?>("NpcMonsterVNum")
                        .HasColumnType("smallint");

                    b.Property<int>("SecondData")
                        .HasColumnType("integer");

                    b.Property<short?>("SkillVNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("SubType")
                        .HasColumnType("smallint");

                    b.Property<int>("ThirdData")
                        .HasColumnType("integer");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("BCardId");

                    b.HasIndex("CardId");

                    b.HasIndex("ItemVNum");

                    b.HasIndex("NpcMonsterVNum");

                    b.HasIndex("SkillVNum");

                    b.ToTable("BCard");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Card", b =>
                {
                    b.Property<short>("CardId")
                        .HasColumnType("smallint");

                    b.Property<byte>("BuffType")
                        .HasColumnType("smallint");

                    b.Property<int>("Delay")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("EffectId")
                        .HasColumnType("integer");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte>("Propability")
                        .HasColumnType("smallint");

                    b.Property<short>("TimeoutBuff")
                        .HasColumnType("smallint");

                    b.Property<byte>("TimeoutBuffChance")
                        .HasColumnType("smallint");

                    b.HasKey("CardId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Character", b =>
                {
                    b.Property<long>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CharacterId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("Act4Dead")
                        .HasColumnType("integer");

                    b.Property<int>("Act4Kill")
                        .HasColumnType("integer");

                    b.Property<int>("Act4Points")
                        .HasColumnType("integer");

                    b.Property<int>("ArenaWinner")
                        .HasColumnType("integer");

                    b.Property<string>("Biography")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("BuffBlocked")
                        .HasColumnType("boolean");

                    b.Property<byte>("Class")
                        .HasColumnType("smallint");

                    b.Property<short>("Compliment")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("CurrentScriptId")
                        .HasColumnType("uuid");

                    b.Property<short>("Dignity")
                        .HasColumnType("smallint");

                    b.Property<int>("Elo")
                        .HasColumnType("integer");

                    b.Property<bool>("EmoticonsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExchangeBlocked")
                        .HasColumnType("boolean");

                    b.Property<byte>("Faction")
                        .HasColumnType("smallint");

                    b.Property<bool>("FamilyRequestBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("FriendRequestBlocked")
                        .HasColumnType("boolean");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<long>("Gold")
                        .HasColumnType("bigint");

                    b.Property<bool>("GroupRequestBlocked")
                        .HasColumnType("boolean");

                    b.Property<byte>("HairColor")
                        .HasColumnType("smallint");

                    b.Property<byte>("HairStyle")
                        .HasColumnType("smallint");

                    b.Property<bool>("HeroChatBlocked")
                        .HasColumnType("boolean");

                    b.Property<byte>("HeroLevel")
                        .HasColumnType("smallint");

                    b.Property<long>("HeroXp")
                        .HasColumnType("bigint");

                    b.Property<int>("Hp")
                        .HasColumnType("integer");

                    b.Property<bool>("HpBlocked")
                        .HasColumnType("boolean");

                    b.Property<byte>("JobLevel")
                        .HasColumnType("smallint");

                    b.Property<long>("JobLevelXp")
                        .HasColumnType("bigint");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<long>("LevelXp")
                        .HasColumnType("bigint");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.Property<int>("MasterPoints")
                        .HasColumnType("integer");

                    b.Property<int>("MasterTicket")
                        .HasColumnType("integer");

                    b.Property<byte>("MaxMateCount")
                        .HasColumnType("smallint");

                    b.Property<bool>("MinilandInviteBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("MouseAimLock")
                        .HasColumnType("boolean");

                    b.Property<int>("Mp")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Prefix")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<bool>("QuickGetUp")
                        .HasColumnType("boolean");

                    b.Property<long>("RagePoint")
                        .HasColumnType("bigint");

                    b.Property<long>("Reput")
                        .HasColumnType("bigint");

                    b.Property<byte>("ServerId")
                        .HasColumnType("smallint");

                    b.Property<bool>("ShouldRename")
                        .HasColumnType("boolean");

                    b.Property<byte>("Slot")
                        .HasColumnType("smallint");

                    b.Property<int>("SpAdditionPoint")
                        .HasColumnType("integer");

                    b.Property<int>("SpPoint")
                        .HasColumnType("integer");

                    b.Property<byte>("State")
                        .HasColumnType("smallint");

                    b.Property<int>("TalentLose")
                        .HasColumnType("integer");

                    b.Property<int>("TalentSurrender")
                        .HasColumnType("integer");

                    b.Property<int>("TalentWin")
                        .HasColumnType("integer");

                    b.Property<bool>("WhisperBlocked")
                        .HasColumnType("boolean");

                    b.HasKey("CharacterId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrentScriptId");

                    b.HasIndex("MapId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("NosCore.Database.Entities.CharacterActPart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte>("ActPartId")
                        .HasColumnType("smallint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActPartId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterActPart");
                });

            modelBuilder.Entity("NosCore.Database.Entities.CharacterQuest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<Instant?>("CompletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("QuestId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("QuestId");

                    b.ToTable("CharacterQuest");
                });

            modelBuilder.Entity("NosCore.Database.Entities.CharacterRelation", b =>
                {
                    b.Property<Guid>("CharacterRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<long>("RelatedCharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("RelationType")
                        .HasColumnType("smallint");

                    b.HasKey("CharacterRelationId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RelatedCharacterId");

                    b.ToTable("CharacterRelation");
                });

            modelBuilder.Entity("NosCore.Database.Entities.CharacterSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("SkillVNum")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SkillVNum");

                    b.ToTable("CharacterSkill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Combo", b =>
                {
                    b.Property<int>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ComboId"));

                    b.Property<short>("Animation")
                        .HasColumnType("smallint");

                    b.Property<short>("Effect")
                        .HasColumnType("smallint");

                    b.Property<short>("Hit")
                        .HasColumnType("smallint");

                    b.Property<short>("SkillVNum")
                        .HasColumnType("smallint");

                    b.HasKey("ComboId");

                    b.HasIndex("SkillVNum");

                    b.ToTable("Combo");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Drop", b =>
                {
                    b.Property<short>("DropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("DropId"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("DropChance")
                        .HasColumnType("integer");

                    b.Property<short?>("MapTypeId")
                        .HasColumnType("smallint");

                    b.Property<short?>("MonsterVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("VNum")
                        .HasColumnType("smallint");

                    b.HasKey("DropId");

                    b.HasIndex("MapTypeId");

                    b.HasIndex("MonsterVNum");

                    b.HasIndex("VNum");

                    b.ToTable("Drop");
                });

            modelBuilder.Entity("NosCore.Database.Entities.EquipmentOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.Property<Guid>("WearableInstanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WearableInstanceId");

                    b.ToTable("EquipmentOption");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Family", b =>
                {
                    b.Property<long>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FamilyId"));

                    b.Property<int>("FamilyExperience")
                        .HasColumnType("integer");

                    b.Property<byte>("FamilyFaction")
                        .HasColumnType("smallint");

                    b.Property<byte>("FamilyHeadGender")
                        .HasColumnType("smallint");

                    b.Property<byte>("FamilyLevel")
                        .HasColumnType("smallint");

                    b.Property<string>("FamilyMessage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ManagerAuthorityType")
                        .HasColumnType("integer");

                    b.Property<bool>("ManagerCanGetHistory")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManagerCanInvite")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManagerCanNotice")
                        .HasColumnType("boolean");

                    b.Property<bool>("ManagerCanShout")
                        .HasColumnType("boolean");

                    b.Property<byte>("MaxSize")
                        .HasColumnType("smallint");

                    b.Property<int>("MemberAuthorityType")
                        .HasColumnType("integer");

                    b.Property<bool>("MemberCanGetHistory")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte>("WarehouseSize")
                        .HasColumnType("smallint");

                    b.HasKey("FamilyId");

                    b.ToTable("Family");
                });

            modelBuilder.Entity("NosCore.Database.Entities.FamilyCharacter", b =>
                {
                    b.Property<long>("FamilyCharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FamilyCharacterId"));

                    b.Property<byte>("Authority")
                        .HasColumnType("smallint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<string>("DailyMessage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Rank")
                        .HasColumnType("smallint");

                    b.HasKey("FamilyCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("FamilyId");

                    b.ToTable("FamilyCharacter");
                });

            modelBuilder.Entity("NosCore.Database.Entities.FamilyLog", b =>
                {
                    b.Property<long>("FamilyLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FamilyLogId"));

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<string>("FamilyLogData")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte>("FamilyLogType")
                        .HasColumnType("smallint");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FamilyLogId");

                    b.HasIndex("FamilyId");

                    b.ToTable("FamilyLog");
                });

            modelBuilder.Entity("NosCore.Database.Entities.I18NActDesc", b =>
                {
                    b.Property<int>("I18NActDescId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("I18NActDescId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("I18NActDescId");

                    b.HasIndex("Key", "RegionType")
                        .IsUnique();

                    b.ToTable("I18NActDesc");
                });

            modelBuilder.Entity("NosCore.Database.Entities.I18NBCard", b =>
                {
                    b.Property<int>("I18NbCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("I18NbCardId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("I18NbCardId");

                    b.HasIndex("Key", "RegionType")
                        .IsUnique();

                    b.ToTable("I18NBCard");
                });

            modelBuilder.Entity("NosCore.Database.Entities.I18NCard", b =>
                {
                    b.Property<int>("I18NCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("I18NCardId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("I18NCardId");

                    b.HasIndex("Key", "RegionType")
                        .IsUnique();

                    b.ToTable("I18NCard");
                });

            modelBuilder.Entity("NosCore.Database.Entities.I18NItem", b =>
                {
                    b.Property<int>("I18NItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("I18NItemId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("I18NItemId");

                    b.HasIndex("Key", "RegionType")
                        .IsUnique();

                    b.ToTable("I18NItem");
                });

            modelBuilder.Entity("NosCore.Database.Entities.I18NMapIdData", b =>
                {
                    b.Property<int>("I18NMapIdDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("I18NMapIdDataId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("I18NMapIdDataId");

                    b.HasIndex("Key", "RegionType")
                        .IsUnique();

                    b.ToTable("I18NMapIdData");
                });

            modelBuilder.Entity("NosCore.Database.Entities.I18NMapPointData", b =>
                {
                    b.Property<int>("I18NMapPointDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("I18NMapPointDataId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("I18NMapPointDataId");

                    b.HasIndex("Key", "RegionType")
                        .IsUnique();

                    b.ToTable("I18NMapPointData");
                });

            modelBuilder.Entity("NosCore.Database.Entities.I18NNpcMonster", b =>
                {
                    b.Property<int>("I18NNpcMonsterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("I18NNpcMonsterId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("I18NNpcMonsterId");

                    b.HasIndex("Key", "RegionType")
                        .IsUnique();

                    b.ToTable("I18NNpcMonster");
                });

            modelBuilder.Entity("NosCore.Database.Entities.I18NNpcMonsterTalk", b =>
                {
                    b.Property<int>("I18NNpcMonsterTalkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("I18NNpcMonsterTalkId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("I18NNpcMonsterTalkId");

                    b.HasIndex("Key", "RegionType")
                        .IsUnique();

                    b.ToTable("I18NNpcMonsterTalk");
                });

            modelBuilder.Entity("NosCore.Database.Entities.I18NQuest", b =>
                {
                    b.Property<int>("I18NQuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("I18NQuestId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("I18NQuestId");

                    b.HasIndex("Key", "RegionType")
                        .IsUnique();

                    b.ToTable("I18NQuest");
                });

            modelBuilder.Entity("NosCore.Database.Entities.I18NSkill", b =>
                {
                    b.Property<int>("I18NSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("I18NSkillId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("I18NSkillId");

                    b.HasIndex("Key", "RegionType")
                        .IsUnique();

                    b.ToTable("I18NSkill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.InventoryItemInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ItemInstanceId")
                        .HasColumnType("uuid");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ItemInstanceId");

                    b.HasIndex("CharacterId", "Slot", "Type")
                        .IsUnique();

                    b.ToTable("InventoryItemInstance");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Item", b =>
                {
                    b.Property<short>("VNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("BasicUpgrade")
                        .HasColumnType("smallint");

                    b.Property<byte>("CellonLvl")
                        .HasColumnType("smallint");

                    b.Property<byte>("Class")
                        .HasColumnType("smallint");

                    b.Property<short>("CloseDefence")
                        .HasColumnType("smallint");

                    b.Property<byte>("Color")
                        .HasColumnType("smallint");

                    b.Property<short>("Concentrate")
                        .HasColumnType("smallint");

                    b.Property<byte>("CriticalLuckRate")
                        .HasColumnType("smallint");

                    b.Property<short>("CriticalRate")
                        .HasColumnType("smallint");

                    b.Property<short>("DamageMaximum")
                        .HasColumnType("smallint");

                    b.Property<short>("DamageMinimum")
                        .HasColumnType("smallint");

                    b.Property<byte>("DarkElement")
                        .HasColumnType("smallint");

                    b.Property<short>("DarkResistance")
                        .HasColumnType("smallint");

                    b.Property<short>("DefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<short>("DistanceDefence")
                        .HasColumnType("smallint");

                    b.Property<short>("DistanceDefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<int>("Effect")
                        .HasColumnType("integer");

                    b.Property<int>("EffectValue")
                        .HasColumnType("integer");

                    b.Property<int>("Element")
                        .HasColumnType("integer");

                    b.Property<short>("ElementRate")
                        .HasColumnType("smallint");

                    b.Property<byte>("EquipmentSlot")
                        .HasColumnType("smallint");

                    b.Property<byte>("FireElement")
                        .HasColumnType("smallint");

                    b.Property<short>("FireResistance")
                        .HasColumnType("smallint");

                    b.Property<bool>("Flag1")
                        .HasColumnType("boolean");

                    b.Property<bool>("Flag2")
                        .HasColumnType("boolean");

                    b.Property<bool>("Flag3")
                        .HasColumnType("boolean");

                    b.Property<bool>("Flag4")
                        .HasColumnType("boolean");

                    b.Property<bool>("Flag6")
                        .HasColumnType("boolean");

                    b.Property<bool>("Flag7")
                        .HasColumnType("boolean");

                    b.Property<bool>("Flag8")
                        .HasColumnType("boolean");

                    b.Property<bool>("Flag9")
                        .HasColumnType("boolean");

                    b.Property<byte>("Height")
                        .HasColumnType("smallint");

                    b.Property<short>("HitRate")
                        .HasColumnType("smallint");

                    b.Property<short>("Hp")
                        .HasColumnType("smallint");

                    b.Property<short>("HpRegeneration")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsColored")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDroppable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHeroic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMinilandActionable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSoldable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTradable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWarehouse")
                        .HasColumnType("boolean");

                    b.Property<byte>("ItemSubType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ItemType")
                        .HasColumnType("smallint");

                    b.Property<long>("ItemValidTime")
                        .HasColumnType("bigint");

                    b.Property<byte>("LevelJobMinimum")
                        .HasColumnType("smallint");

                    b.Property<byte>("LevelMinimum")
                        .HasColumnType("smallint");

                    b.Property<byte>("LightElement")
                        .HasColumnType("smallint");

                    b.Property<short>("LightResistance")
                        .HasColumnType("smallint");

                    b.Property<short>("MagicDefence")
                        .HasColumnType("smallint");

                    b.Property<byte>("MaxCellon")
                        .HasColumnType("smallint");

                    b.Property<byte>("MaxCellonLvl")
                        .HasColumnType("smallint");

                    b.Property<short>("MaxElementRate")
                        .HasColumnType("smallint");

                    b.Property<byte>("MaximumAmmo")
                        .HasColumnType("smallint");

                    b.Property<int>("MinilandObjectPoint")
                        .HasColumnType("integer");

                    b.Property<short>("MoreHp")
                        .HasColumnType("smallint");

                    b.Property<short>("MoreMp")
                        .HasColumnType("smallint");

                    b.Property<short>("Morph")
                        .HasColumnType("smallint");

                    b.Property<short>("Mp")
                        .HasColumnType("smallint");

                    b.Property<short>("MpRegeneration")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<short>("PvpDefence")
                        .HasColumnType("smallint");

                    b.Property<byte>("PvpStrength")
                        .HasColumnType("smallint");

                    b.Property<short>("ReduceOposantResistance")
                        .HasColumnType("smallint");

                    b.Property<long>("ReputPrice")
                        .HasColumnType("bigint");

                    b.Property<byte>("ReputationMinimum")
                        .HasColumnType("smallint");

                    b.Property<bool>("RequireBinding")
                        .HasColumnType("boolean");

                    b.Property<short>("SecondMorph")
                        .HasColumnType("smallint");

                    b.Property<int>("SecondaryElement")
                        .HasColumnType("integer");

                    b.Property<byte>("Sex")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Speed")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<short>("WaitDelay")
                        .HasColumnType("smallint");

                    b.Property<byte>("WaterElement")
                        .HasColumnType("smallint");

                    b.Property<short>("WaterResistance")
                        .HasColumnType("smallint");

                    b.Property<byte>("Width")
                        .HasColumnType("smallint");

                    b.HasKey("VNum");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ItemInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<short>("Amount")
                        .HasColumnType("smallint");

                    b.Property<long?>("BoundCharacterId")
                        .HasColumnType("bigint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("Design")
                        .HasColumnType("smallint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurabilityPoint")
                        .HasColumnType("integer");

                    b.Property<Instant?>("ItemDeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Rare")
                        .HasColumnType("smallint");

                    b.Property<byte>("Upgrade")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("BoundCharacterId");

                    b.HasIndex("ItemVNum");

                    b.ToTable("ItemInstance");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ItemInstance");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Mail", b =>
                {
                    b.Property<long>("MailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MailId"));

                    b.Property<short?>("Armor")
                        .HasColumnType("smallint");

                    b.Property<short?>("CostumeHat")
                        .HasColumnType("smallint");

                    b.Property<short?>("CostumeSuit")
                        .HasColumnType("smallint");

                    b.Property<Instant>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("Fairy")
                        .HasColumnType("smallint");

                    b.Property<short?>("Hat")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSenderCopy")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ItemInstanceId")
                        .HasColumnType("uuid");

                    b.Property<short?>("MainWeapon")
                        .HasColumnType("smallint");

                    b.Property<short?>("Mask")
                        .HasColumnType("smallint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<short?>("SecondaryWeapon")
                        .HasColumnType("smallint");

                    b.Property<byte?>("SenderCharacterClass")
                        .HasColumnType("smallint");

                    b.Property<byte?>("SenderGender")
                        .HasColumnType("smallint");

                    b.Property<byte?>("SenderHairColor")
                        .HasColumnType("smallint");

                    b.Property<byte?>("SenderHairStyle")
                        .HasColumnType("smallint");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<short?>("SenderMorphId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<short?>("WeaponSkin")
                        .HasColumnType("smallint");

                    b.Property<short?>("WingSkin")
                        .HasColumnType("smallint");

                    b.HasKey("MailId");

                    b.HasIndex("ItemInstanceId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Map", b =>
                {
                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Music")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("ShopAllowed")
                        .HasColumnType("boolean");

                    b.HasKey("MapId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MapMonster", b =>
                {
                    b.Property<int>("MapMonsterId")
                        .HasColumnType("integer");

                    b.Property<byte>("Direction")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoving")
                        .HasColumnType("boolean");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.Property<short>("VNum")
                        .HasColumnType("smallint");

                    b.HasKey("MapMonsterId");

                    b.HasIndex("MapId");

                    b.HasIndex("VNum");

                    b.ToTable("MapMonster");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MapNpc", b =>
                {
                    b.Property<int>("MapNpcId")
                        .HasColumnType("integer");

                    b.Property<short?>("Dialog")
                        .HasColumnType("smallint");

                    b.Property<byte>("Direction")
                        .HasColumnType("smallint");

                    b.Property<short>("Effect")
                        .HasColumnType("smallint");

                    b.Property<short>("EffectDelay")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMoving")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSitting")
                        .HasColumnType("boolean");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.Property<short>("VNum")
                        .HasColumnType("smallint");

                    b.HasKey("MapNpcId");

                    b.HasIndex("Dialog");

                    b.HasIndex("MapId");

                    b.HasIndex("VNum");

                    b.ToTable("MapNpc");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MapType", b =>
                {
                    b.Property<short>("MapTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("MapTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("PotionDelay")
                        .HasColumnType("smallint");

                    b.Property<long?>("RespawnMapTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReturnMapTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("MapTypeId");

                    b.HasIndex("RespawnMapTypeId");

                    b.HasIndex("ReturnMapTypeId");

                    b.ToTable("MapType");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MapTypeMap", b =>
                {
                    b.Property<short>("MapTypeMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("MapTypeMapId"));

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<short>("MapTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("MapTypeMapId");

                    b.HasIndex("MapTypeId");

                    b.HasIndex("MapId", "MapTypeId")
                        .IsUnique();

                    b.ToTable("MapTypeMap");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Mate", b =>
                {
                    b.Property<long>("MateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MateId"));

                    b.Property<byte>("Attack")
                        .HasColumnType("smallint");

                    b.Property<bool>("CanPickUp")
                        .HasColumnType("boolean");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Defence")
                        .HasColumnType("smallint");

                    b.Property<byte>("Direction")
                        .HasColumnType("smallint");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint");

                    b.Property<int>("Hp")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSummonable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTeamMember")
                        .HasColumnType("boolean");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<short>("Loyalty")
                        .HasColumnType("smallint");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.Property<byte>("MateType")
                        .HasColumnType("smallint");

                    b.Property<int>("Mp")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<short>("Skin")
                        .HasColumnType("smallint");

                    b.Property<short>("VNum")
                        .HasColumnType("smallint");

                    b.HasKey("MateId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("VNum");

                    b.ToTable("Mate");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Miniland", b =>
                {
                    b.Property<Guid>("MinilandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DailyVisitCount")
                        .HasColumnType("integer");

                    b.Property<string>("MinilandMessage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("MinilandPoint")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<byte>("State")
                        .HasColumnType("smallint");

                    b.Property<int>("VisitCount")
                        .HasColumnType("integer");

                    b.Property<short>("WelcomeMusicInfo")
                        .HasColumnType("smallint");

                    b.HasKey("MinilandId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Miniland");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MinilandObject", b =>
                {
                    b.Property<Guid>("MinilandObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InventoryItemInstanceId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Level1BoxAmount")
                        .HasColumnType("smallint");

                    b.Property<byte>("Level2BoxAmount")
                        .HasColumnType("smallint");

                    b.Property<byte>("Level3BoxAmount")
                        .HasColumnType("smallint");

                    b.Property<byte>("Level4BoxAmount")
                        .HasColumnType("smallint");

                    b.Property<byte>("Level5BoxAmount")
                        .HasColumnType("smallint");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.HasKey("MinilandObjectId");

                    b.HasIndex("InventoryItemInstanceId");

                    b.ToTable("MinilandObject");
                });

            modelBuilder.Entity("NosCore.Database.Entities.NpcMonster", b =>
                {
                    b.Property<short>("NpcMonsterVNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("AmountRequired")
                        .HasColumnType("smallint");

                    b.Property<byte>("AttackClass")
                        .HasColumnType("smallint");

                    b.Property<byte>("AttackUpgrade")
                        .HasColumnType("smallint");

                    b.Property<byte>("BasicArea")
                        .HasColumnType("smallint");

                    b.Property<short>("BasicCooldown")
                        .HasColumnType("smallint");

                    b.Property<byte>("BasicRange")
                        .HasColumnType("smallint");

                    b.Property<short>("BasicSkill")
                        .HasColumnType("smallint");

                    b.Property<short>("CloseDefence")
                        .HasColumnType("smallint");

                    b.Property<short>("Concentrate")
                        .HasColumnType("smallint");

                    b.Property<byte>("CriticalChance")
                        .HasColumnType("smallint");

                    b.Property<short>("CriticalRate")
                        .HasColumnType("smallint");

                    b.Property<short>("DamageMaximum")
                        .HasColumnType("smallint");

                    b.Property<short>("DamageMinimum")
                        .HasColumnType("smallint");

                    b.Property<short>("DarkResistance")
                        .HasColumnType("smallint");

                    b.Property<short>("DefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<byte>("DefenceUpgrade")
                        .HasColumnType("smallint");

                    b.Property<short>("DistanceDefence")
                        .HasColumnType("smallint");

                    b.Property<short>("DistanceDefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<byte>("Element")
                        .HasColumnType("smallint");

                    b.Property<short>("ElementRate")
                        .HasColumnType("smallint");

                    b.Property<short>("FireResistance")
                        .HasColumnType("smallint");

                    b.Property<int>("GiveDamagePercentage")
                        .HasColumnType("integer");

                    b.Property<byte>("HeroLevel")
                        .HasColumnType("smallint");

                    b.Property<int>("HeroXp")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHostile")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPercent")
                        .HasColumnType("boolean");

                    b.Property<int>("JobXp")
                        .HasColumnType("integer");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<short>("LightResistance")
                        .HasColumnType("smallint");

                    b.Property<short>("MagicDefence")
                        .HasColumnType("smallint");

                    b.Property<int>("MaxHp")
                        .HasColumnType("integer");

                    b.Property<int>("MaxMp")
                        .HasColumnType("integer");

                    b.Property<byte>("MonsterType")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("NoAggresiveIcon")
                        .HasColumnType("boolean");

                    b.Property<byte>("NoticeRange")
                        .HasColumnType("smallint");

                    b.Property<byte>("Race")
                        .HasColumnType("smallint");

                    b.Property<byte>("RaceType")
                        .HasColumnType("smallint");

                    b.Property<int>("RespawnTime")
                        .HasColumnType("integer");

                    b.Property<byte>("Speed")
                        .HasColumnType("smallint");

                    b.Property<int>("TakeDamages")
                        .HasColumnType("integer");

                    b.Property<short>("VNumRequired")
                        .HasColumnType("smallint");

                    b.Property<short>("WaterResistance")
                        .HasColumnType("smallint");

                    b.Property<int>("Xp")
                        .HasColumnType("integer");

                    b.HasKey("NpcMonsterVNum");

                    b.ToTable("NpcMonster");
                });

            modelBuilder.Entity("NosCore.Database.Entities.NpcMonsterSkill", b =>
                {
                    b.Property<long>("NpcMonsterSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("NpcMonsterSkillId"));

                    b.Property<short>("NpcMonsterVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint");

                    b.Property<short>("SkillVNum")
                        .HasColumnType("smallint");

                    b.HasKey("NpcMonsterSkillId");

                    b.HasIndex("NpcMonsterVNum");

                    b.HasIndex("SkillVNum");

                    b.ToTable("NpcMonsterSkill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.NpcTalk", b =>
                {
                    b.Property<short>("DialogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("DialogId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("DialogId");

                    b.ToTable("NpcTalk");
                });

            modelBuilder.Entity("NosCore.Database.Entities.PenaltyLog", b =>
                {
                    b.Property<int>("PenaltyLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PenaltyLogId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Penalty")
                        .HasColumnType("smallint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("PenaltyLogId");

                    b.HasIndex("AccountId");

                    b.ToTable("PenaltyLog");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Portal", b =>
                {
                    b.Property<int>("PortalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PortalId"));

                    b.Property<short>("DestinationMapId")
                        .HasColumnType("smallint");

                    b.Property<short>("DestinationX")
                        .HasColumnType("smallint");

                    b.Property<short>("DestinationY")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<short>("SourceMapId")
                        .HasColumnType("smallint");

                    b.Property<short>("SourceX")
                        .HasColumnType("smallint");

                    b.Property<short>("SourceY")
                        .HasColumnType("smallint");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("PortalId");

                    b.HasIndex("DestinationMapId");

                    b.HasIndex("SourceMapId");

                    b.ToTable("Portal");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Quest", b =>
                {
                    b.Property<short>("QuestId")
                        .HasColumnType("smallint");

                    b.Property<bool>("AutoFinish")
                        .HasColumnType("boolean");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("EndDialogId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<byte>("LevelMax")
                        .HasColumnType("smallint");

                    b.Property<byte>("LevelMin")
                        .HasColumnType("smallint");

                    b.Property<short?>("NextQuestId")
                        .HasColumnType("smallint");

                    b.Property<short>("QuestType")
                        .HasColumnType("smallint");

                    b.Property<short?>("RequiredQuestId")
                        .HasColumnType("smallint");

                    b.Property<int?>("SpecialData")
                        .HasColumnType("integer");

                    b.Property<int?>("StartDialogId")
                        .HasColumnType("integer");

                    b.Property<short?>("TargetMap")
                        .HasColumnType("smallint");

                    b.Property<short?>("TargetX")
                        .HasColumnType("smallint");

                    b.Property<short?>("TargetY")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("QuestId");

                    b.ToTable("Quest");
                });

            modelBuilder.Entity("NosCore.Database.Entities.QuestObjective", b =>
                {
                    b.Property<Guid>("QuestObjectiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("FirstData")
                        .HasColumnType("integer");

                    b.Property<int?>("FourthData")
                        .HasColumnType("integer");

                    b.Property<short>("QuestId")
                        .HasColumnType("smallint");

                    b.Property<int?>("SecondData")
                        .HasColumnType("integer");

                    b.Property<int?>("ThirdData")
                        .HasColumnType("integer");

                    b.HasKey("QuestObjectiveId");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestObjective");
                });

            modelBuilder.Entity("NosCore.Database.Entities.QuestQuestReward", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<short>("QuestId")
                        .HasColumnType("smallint");

                    b.Property<short>("QuestRewardId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.HasIndex("QuestRewardId");

                    b.ToTable("QuestQuestReward");
                });

            modelBuilder.Entity("NosCore.Database.Entities.QuestReward", b =>
                {
                    b.Property<short>("QuestRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("QuestRewardId"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("Data")
                        .HasColumnType("integer");

                    b.Property<byte>("Design")
                        .HasColumnType("smallint");

                    b.Property<byte>("Rarity")
                        .HasColumnType("smallint");

                    b.Property<byte>("RewardType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Upgrade")
                        .HasColumnType("smallint");

                    b.HasKey("QuestRewardId");

                    b.ToTable("QuestReward");
                });

            modelBuilder.Entity("NosCore.Database.Entities.QuicklistEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("IconType")
                        .HasColumnType("smallint");

                    b.Property<short>("IconVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Morph")
                        .HasColumnType("smallint");

                    b.Property<short>("QuickListIndex")
                        .HasColumnType("smallint");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("QuicklistEntry");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Recipe", b =>
                {
                    b.Property<short>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("RecipeId"));

                    b.Property<byte>("Amount")
                        .HasColumnType("smallint");

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<int>("MapNpcId")
                        .HasColumnType("integer");

                    b.HasKey("RecipeId");

                    b.HasIndex("ItemVNum");

                    b.HasIndex("MapNpcId");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("NosCore.Database.Entities.RecipeItem", b =>
                {
                    b.Property<short>("RecipeItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("RecipeItemId"));

                    b.Property<short>("Amount")
                        .HasColumnType("smallint");

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("RecipeId")
                        .HasColumnType("smallint");

                    b.HasKey("RecipeItemId");

                    b.HasIndex("ItemVNum");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeItem");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Respawn", b =>
                {
                    b.Property<long>("RespawnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RespawnId"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<long>("RespawnMapTypeId")
                        .HasColumnType("bigint");

                    b.Property<short>("X")
                        .HasColumnType("smallint");

                    b.Property<short>("Y")
                        .HasColumnType("smallint");

                    b.HasKey("RespawnId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("MapId");

                    b.HasIndex("RespawnMapTypeId");

                    b.ToTable("Respawn");
                });

            modelBuilder.Entity("NosCore.Database.Entities.RespawnMapType", b =>
                {
                    b.Property<long>("RespawnMapTypeId")
                        .HasColumnType("bigint");

                    b.Property<short>("DefaultX")
                        .HasColumnType("smallint");

                    b.Property<short>("DefaultY")
                        .HasColumnType("smallint");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("RespawnMapTypeId");

                    b.HasIndex("MapId");

                    b.ToTable("RespawnMapType");
                });

            modelBuilder.Entity("NosCore.Database.Entities.RollGeneratedItem", b =>
                {
                    b.Property<short>("RollGeneratedItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("RollGeneratedItemId"));

                    b.Property<bool>("IsRareRandom")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperReward")
                        .HasColumnType("boolean");

                    b.Property<byte>("ItemGeneratedAmount")
                        .HasColumnType("smallint");

                    b.Property<byte>("ItemGeneratedUpgrade")
                        .HasColumnType("smallint");

                    b.Property<short>("ItemGeneratedVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("MaximumOriginalItemRare")
                        .HasColumnType("smallint");

                    b.Property<short>("MinimumOriginalItemRare")
                        .HasColumnType("smallint");

                    b.Property<short>("OriginalItemDesign")
                        .HasColumnType("smallint");

                    b.Property<short>("OriginalItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Probability")
                        .HasColumnType("smallint");

                    b.HasKey("RollGeneratedItemId");

                    b.HasIndex("ItemGeneratedVNum");

                    b.HasIndex("OriginalItemVNum");

                    b.ToTable("RollGeneratedItem");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Script", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<short?>("Argument1")
                        .HasColumnType("smallint");

                    b.Property<short?>("Argument2")
                        .HasColumnType("smallint");

                    b.Property<short?>("Argument3")
                        .HasColumnType("smallint");

                    b.Property<byte>("ScriptId")
                        .HasColumnType("smallint");

                    b.Property<short>("ScriptStepId")
                        .HasColumnType("smallint");

                    b.Property<string>("StepType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StringArgument")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScriptId", "ScriptStepId")
                        .IsUnique();

                    b.ToTable("Script");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ScriptedInstance", b =>
                {
                    b.Property<short>("ScriptedInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("ScriptedInstanceId"));

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<short>("PositionX")
                        .HasColumnType("smallint");

                    b.Property<short>("PositionY")
                        .HasColumnType("smallint");

                    b.Property<string>("Script")
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("ScriptedInstanceId");

                    b.HasIndex("MapId");

                    b.ToTable("ScriptedInstance");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShopId"));

                    b.Property<int>("MapNpcId")
                        .HasColumnType("integer");

                    b.Property<byte>("MenuType")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShopType")
                        .HasColumnType("smallint");

                    b.HasKey("ShopId");

                    b.HasIndex("MapNpcId");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ShopItem", b =>
                {
                    b.Property<int>("ShopItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShopItemId"));

                    b.Property<byte>("Color")
                        .HasColumnType("smallint");

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Rare")
                        .HasColumnType("smallint");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer");

                    b.Property<byte>("Slot")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<byte>("Upgrade")
                        .HasColumnType("smallint");

                    b.HasKey("ShopItemId");

                    b.HasIndex("ItemVNum");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopItem");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ShopSkill", b =>
                {
                    b.Property<int>("ShopSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShopSkillId"));

                    b.Property<int>("ShopId")
                        .HasColumnType("integer");

                    b.Property<short>("SkillVNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("Slot")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("ShopSkillId");

                    b.HasIndex("ShopId");

                    b.HasIndex("SkillVNum");

                    b.ToTable("ShopSkill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Skill", b =>
                {
                    b.Property<short>("SkillVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("AttackAnimation")
                        .HasColumnType("smallint");

                    b.Property<short>("CastAnimation")
                        .HasColumnType("smallint");

                    b.Property<short>("CastEffect")
                        .HasColumnType("smallint");

                    b.Property<short>("CastId")
                        .HasColumnType("smallint");

                    b.Property<short>("CastTime")
                        .HasColumnType("smallint");

                    b.Property<byte>("Class")
                        .HasColumnType("smallint");

                    b.Property<short>("Cooldown")
                        .HasColumnType("smallint");

                    b.Property<byte>("CpCost")
                        .HasColumnType("smallint");

                    b.Property<short>("Duration")
                        .HasColumnType("smallint");

                    b.Property<short>("Effect")
                        .HasColumnType("smallint");

                    b.Property<byte>("Element")
                        .HasColumnType("smallint");

                    b.Property<byte>("HitType")
                        .HasColumnType("smallint");

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<byte>("LevelMinimum")
                        .HasColumnType("smallint");

                    b.Property<byte>("MinimumAdventurerLevel")
                        .HasColumnType("smallint");

                    b.Property<byte>("MinimumArcherLevel")
                        .HasColumnType("smallint");

                    b.Property<byte>("MinimumMagicianLevel")
                        .HasColumnType("smallint");

                    b.Property<byte>("MinimumSwordmanLevel")
                        .HasColumnType("smallint");

                    b.Property<short>("MpCost")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<byte>("Range")
                        .HasColumnType("smallint");

                    b.Property<byte>("SkillType")
                        .HasColumnType("smallint");

                    b.Property<byte>("TargetRange")
                        .HasColumnType("smallint");

                    b.Property<byte>("TargetType")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<short>("UpgradeSkill")
                        .HasColumnType("smallint");

                    b.Property<short>("UpgradeType")
                        .HasColumnType("smallint");

                    b.HasKey("SkillVNum");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.StaticBonus", b =>
                {
                    b.Property<long>("StaticBonusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StaticBonusId"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<Instant?>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("StaticBonusType")
                        .HasColumnType("smallint");

                    b.HasKey("StaticBonusId");

                    b.HasIndex("CharacterId");

                    b.ToTable("StaticBonus");
                });

            modelBuilder.Entity("NosCore.Database.Entities.StaticBuff", b =>
                {
                    b.Property<long>("StaticBuffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StaticBuffId"));

                    b.Property<short>("CardId")
                        .HasColumnType("smallint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("RemainingTime")
                        .HasColumnType("integer");

                    b.HasKey("StaticBuffId");

                    b.HasIndex("CardId");

                    b.HasIndex("CharacterId");

                    b.ToTable("StaticBuff");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Teleporter", b =>
                {
                    b.Property<short>("TeleporterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("TeleporterId"));

                    b.Property<short>("Index")
                        .HasColumnType("smallint");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<int>("MapNpcId")
                        .HasColumnType("integer");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("TeleporterId");

                    b.HasIndex("MapId");

                    b.HasIndex("MapNpcId");

                    b.ToTable("Teleporter");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Title", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("TitleType")
                        .HasColumnType("smallint");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId", "TitleType")
                        .IsUnique();

                    b.ToTable("Title");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("FamilyId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("NosCore.Database.Entities.WarehouseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemInstanceId")
                        .HasColumnType("uuid");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemInstanceId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseItem");
                });

            modelBuilder.Entity("NosCore.Database.Entities.UsableInstance", b =>
                {
                    b.HasBaseType("NosCore.Database.Entities.ItemInstance");

                    b.Property<short?>("Hp")
                        .HasColumnType("smallint");

                    b.Property<short?>("Mp")
                        .HasColumnType("smallint");

                    b.HasDiscriminator().HasValue("UsableInstance");
                });

            modelBuilder.Entity("NosCore.Database.Entities.WearableInstance", b =>
                {
                    b.HasBaseType("NosCore.Database.Entities.ItemInstance");

                    b.Property<byte?>("Ammo")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Cellon")
                        .HasColumnType("smallint");

                    b.Property<short?>("CloseDefence")
                        .HasColumnType("smallint");

                    b.Property<short?>("Concentrate")
                        .HasColumnType("smallint");

                    b.Property<short?>("CriticalDodge")
                        .HasColumnType("smallint");

                    b.Property<byte?>("CriticalLuckRate")
                        .HasColumnType("smallint");

                    b.Property<short?>("CriticalRate")
                        .HasColumnType("smallint");

                    b.Property<short?>("DamageMaximum")
                        .HasColumnType("smallint");

                    b.Property<short?>("DamageMinimum")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DarkElement")
                        .HasColumnType("smallint");

                    b.Property<short?>("DarkResistance")
                        .HasColumnType("smallint");

                    b.Property<short?>("DefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<short?>("DistanceDefence")
                        .HasColumnType("smallint");

                    b.Property<short?>("DistanceDefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<short?>("ElementRate")
                        .HasColumnType("smallint");

                    b.Property<byte?>("FireElement")
                        .HasColumnType("smallint");

                    b.Property<short?>("FireResistance")
                        .HasColumnType("smallint");

                    b.Property<short?>("HitRate")
                        .HasColumnType("smallint");

                    b.Property<short?>("Hp")
                        .HasColumnType("smallint")
                        .HasColumnName("WearableInstance_Hp");

                    b.Property<bool?>("IsEmpty")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFixed")
                        .HasColumnType("boolean");

                    b.Property<byte?>("LightElement")
                        .HasColumnType("smallint");

                    b.Property<short?>("LightResistance")
                        .HasColumnType("smallint");

                    b.Property<short?>("MagicDefence")
                        .HasColumnType("smallint");

                    b.Property<short?>("MaxElementRate")
                        .HasColumnType("smallint");

                    b.Property<short?>("Mp")
                        .HasColumnType("smallint")
                        .HasColumnName("WearableInstance_Mp");

                    b.Property<byte?>("ShellRarity")
                        .HasColumnType("smallint");

                    b.Property<byte?>("WaterElement")
                        .HasColumnType("smallint");

                    b.Property<short?>("WaterResistance")
                        .HasColumnType("smallint");

                    b.Property<long?>("Xp")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("WearableInstance");
                });

            modelBuilder.Entity("NosCore.Database.Entities.SpecialistInstance", b =>
                {
                    b.HasBaseType("NosCore.Database.Entities.WearableInstance");

                    b.Property<short>("SlDamage")
                        .HasColumnType("smallint");

                    b.Property<short>("SlDefence")
                        .HasColumnType("smallint");

                    b.Property<short>("SlElement")
                        .HasColumnType("smallint");

                    b.Property<short>("SlHp")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpDamage")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpDark")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpDefence")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpElement")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpFire")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpHp")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpLevel")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpLight")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpStoneUpgrade")
                        .HasColumnType("smallint");

                    b.Property<byte>("SpWater")
                        .HasColumnType("smallint");

                    b.HasDiscriminator().HasValue("SpecialistInstance");
                });

            modelBuilder.Entity("NosCore.Database.Entities.BoxInstance", b =>
                {
                    b.HasBaseType("NosCore.Database.Entities.SpecialistInstance");

                    b.Property<short?>("HoldingVNum")
                        .HasColumnType("smallint");

                    b.HasDiscriminator().HasValue("BoxInstance");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ActPart", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Act", "Act")
                        .WithMany("ActParts")
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Act");
                });

            modelBuilder.Entity("NosCore.Database.Entities.BazaarItem", b =>
                {
                    b.HasOne("NosCore.Database.Entities.ItemInstance", "ItemInstance")
                        .WithMany("BazaarItem")
                        .HasForeignKey("ItemInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Character", "Seller")
                        .WithMany("BazaarItem")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemInstance");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("NosCore.Database.Entities.BCard", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Card", "Card")
                        .WithMany("BCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NosCore.Database.Entities.Item", "Item")
                        .WithMany("BCards")
                        .HasForeignKey("ItemVNum")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NosCore.Database.Entities.NpcMonster", "NpcMonster")
                        .WithMany("BCards")
                        .HasForeignKey("NpcMonsterVNum")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NosCore.Database.Entities.Skill", "Skill")
                        .WithMany("BCards")
                        .HasForeignKey("SkillVNum")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Card");

                    b.Navigation("Item");

                    b.Navigation("NpcMonster");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Character", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Account", "Account")
                        .WithMany("Character")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Script", "Script")
                        .WithMany("Characters")
                        .HasForeignKey("CurrentScriptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NosCore.Database.Entities.Map", "Map")
                        .WithMany("Character")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Map");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("NosCore.Database.Entities.CharacterActPart", b =>
                {
                    b.HasOne("NosCore.Database.Entities.ActPart", "ActPart")
                        .WithMany("CharacterActParts")
                        .HasForeignKey("ActPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("CharacterActParts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActPart");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NosCore.Database.Entities.CharacterQuest", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("CharacterQuest")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Quest", "Quest")
                        .WithMany("CharacterQuest")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("NosCore.Database.Entities.CharacterRelation", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Character1")
                        .WithMany("CharacterRelation1")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Character", "Character2")
                        .WithMany("CharacterRelation2")
                        .HasForeignKey("RelatedCharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character1");

                    b.Navigation("Character2");
                });

            modelBuilder.Entity("NosCore.Database.Entities.CharacterSkill", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("CharacterSkill")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Skill", "Skill")
                        .WithMany("CharacterSkill")
                        .HasForeignKey("SkillVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Combo", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Skill", "Skill")
                        .WithMany("Combo")
                        .HasForeignKey("SkillVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Drop", b =>
                {
                    b.HasOne("NosCore.Database.Entities.MapType", "MapType")
                        .WithMany("Drops")
                        .HasForeignKey("MapTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NosCore.Database.Entities.NpcMonster", "NpcMonster")
                        .WithMany("Drop")
                        .HasForeignKey("MonsterVNum")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NosCore.Database.Entities.Item", "Item")
                        .WithMany("Drop")
                        .HasForeignKey("VNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("MapType");

                    b.Navigation("NpcMonster");
                });

            modelBuilder.Entity("NosCore.Database.Entities.EquipmentOption", b =>
                {
                    b.HasOne("NosCore.Database.Entities.WearableInstance", "WearableInstance")
                        .WithMany()
                        .HasForeignKey("WearableInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WearableInstance");
                });

            modelBuilder.Entity("NosCore.Database.Entities.FamilyCharacter", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("FamilyCharacter")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Family", "Family")
                        .WithMany("FamilyCharacters")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("NosCore.Database.Entities.FamilyLog", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Family", "Family")
                        .WithMany("FamilyLogs")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("NosCore.Database.Entities.InventoryItemInstance", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("Inventory")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.ItemInstance", "ItemInstance")
                        .WithMany("InventoryItemInstance")
                        .HasForeignKey("ItemInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("ItemInstance");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ItemInstance", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "BoundCharacter")
                        .WithMany()
                        .HasForeignKey("BoundCharacterId");

                    b.HasOne("NosCore.Database.Entities.Item", "Item")
                        .WithMany("ItemInstances")
                        .HasForeignKey("ItemVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BoundCharacter");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Mail", b =>
                {
                    b.HasOne("NosCore.Database.Entities.ItemInstance", "ItemInstance")
                        .WithMany("Mail")
                        .HasForeignKey("ItemInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NosCore.Database.Entities.Character", "Receiver")
                        .WithMany("Mail1")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Character", "Sender")
                        .WithMany("Mail")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ItemInstance");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MapMonster", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Map", "Map")
                        .WithMany("MapMonster")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.NpcMonster", "NpcMonster")
                        .WithMany("MapMonster")
                        .HasForeignKey("VNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("NpcMonster");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MapNpc", b =>
                {
                    b.HasOne("NosCore.Database.Entities.NpcTalk", "NpcTalk")
                        .WithMany("MapNpc")
                        .HasForeignKey("Dialog")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NosCore.Database.Entities.Map", "Map")
                        .WithMany("MapNpc")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.NpcMonster", "NpcMonster")
                        .WithMany("MapNpc")
                        .HasForeignKey("VNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("NpcMonster");

                    b.Navigation("NpcTalk");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MapType", b =>
                {
                    b.HasOne("NosCore.Database.Entities.RespawnMapType", "RespawnMapType")
                        .WithMany("MapTypes")
                        .HasForeignKey("RespawnMapTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NosCore.Database.Entities.RespawnMapType", "ReturnMapType")
                        .WithMany("MapTypes1")
                        .HasForeignKey("ReturnMapTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("RespawnMapType");

                    b.Navigation("ReturnMapType");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MapTypeMap", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Map", "Map")
                        .WithMany("MapTypeMap")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.MapType", "MapType")
                        .WithMany("MapTypeMap")
                        .HasForeignKey("MapTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("MapType");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Mate", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("Mate")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.NpcMonster", "NpcMonster")
                        .WithMany("Mate")
                        .HasForeignKey("VNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("NpcMonster");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Miniland", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Owner")
                        .WithMany("Miniland")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MinilandObject", b =>
                {
                    b.HasOne("NosCore.Database.Entities.InventoryItemInstance", "InventoryItemInstance")
                        .WithMany("MinilandObject")
                        .HasForeignKey("InventoryItemInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InventoryItemInstance");
                });

            modelBuilder.Entity("NosCore.Database.Entities.NpcMonsterSkill", b =>
                {
                    b.HasOne("NosCore.Database.Entities.NpcMonster", "NpcMonster")
                        .WithMany("NpcMonsterSkill")
                        .HasForeignKey("NpcMonsterVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Skill", "Skill")
                        .WithMany("NpcMonsterSkill")
                        .HasForeignKey("SkillVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NpcMonster");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.PenaltyLog", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Account", "Account")
                        .WithMany("PenaltyLog")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Portal", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Map", "Map")
                        .WithMany("Portal")
                        .HasForeignKey("DestinationMapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Map", "Map1")
                        .WithMany("Portal1")
                        .HasForeignKey("SourceMapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Map1");
                });

            modelBuilder.Entity("NosCore.Database.Entities.QuestObjective", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Quest", "Quest")
                        .WithMany("QuestObjective")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("NosCore.Database.Entities.QuestQuestReward", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Quest", "Quest")
                        .WithMany("QuestQuestReward")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.QuestReward", "QuestReward")
                        .WithMany("QuestQuestReward")
                        .HasForeignKey("QuestRewardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("QuestReward");
                });

            modelBuilder.Entity("NosCore.Database.Entities.QuicklistEntry", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("QuicklistEntry")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Recipe", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Item", "Item")
                        .WithMany("Recipe")
                        .HasForeignKey("ItemVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.MapNpc", "MapNpc")
                        .WithMany("Recipe")
                        .HasForeignKey("MapNpcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("MapNpc");
                });

            modelBuilder.Entity("NosCore.Database.Entities.RecipeItem", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Item", "Item")
                        .WithMany("RecipeItem")
                        .HasForeignKey("ItemVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Recipe", "Recipe")
                        .WithMany("RecipeItem")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Respawn", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("Respawn")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Map", "Map")
                        .WithMany("Respawn")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.RespawnMapType", "RespawnMapType")
                        .WithMany("Respawn")
                        .HasForeignKey("RespawnMapTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Map");

                    b.Navigation("RespawnMapType");
                });

            modelBuilder.Entity("NosCore.Database.Entities.RespawnMapType", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Map", "Map")
                        .WithMany("RespawnMapType")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("NosCore.Database.Entities.RollGeneratedItem", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Item", "ItemGenerated")
                        .WithMany("RollGeneratedItem2")
                        .HasForeignKey("ItemGeneratedVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Item", "OriginalItem")
                        .WithMany("RollGeneratedItem")
                        .HasForeignKey("OriginalItemVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemGenerated");

                    b.Navigation("OriginalItem");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ScriptedInstance", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Map", "Map")
                        .WithMany("ScriptedInstance")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Shop", b =>
                {
                    b.HasOne("NosCore.Database.Entities.MapNpc", "MapNpc")
                        .WithMany("Shop")
                        .HasForeignKey("MapNpcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MapNpc");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ShopItem", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Item", "Item")
                        .WithMany("ShopItem")
                        .HasForeignKey("ItemVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Shop", "Shop")
                        .WithMany("ShopItem")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ShopSkill", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Shop", "Shop")
                        .WithMany("ShopSkill")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Skill", "Skill")
                        .WithMany("ShopSkill")
                        .HasForeignKey("SkillVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shop");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.StaticBonus", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("StaticBonus")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NosCore.Database.Entities.StaticBuff", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Card", "Card")
                        .WithMany("StaticBuff")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("StaticBuff")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Teleporter", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Map", "Map")
                        .WithMany("Teleporter")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.MapNpc", "MapNpc")
                        .WithMany("Teleporter")
                        .HasForeignKey("MapNpcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("MapNpc");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Title", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("Title")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Warehouse", b =>
                {
                    b.HasOne("NosCore.Database.Entities.Character", "Character")
                        .WithMany("Warehouses")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NosCore.Database.Entities.Family", "Family")
                        .WithMany("Warehouses")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Character");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("NosCore.Database.Entities.WarehouseItem", b =>
                {
                    b.HasOne("NosCore.Database.Entities.ItemInstance", "ItemInstance")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("ItemInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NosCore.Database.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemInstance");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Account", b =>
                {
                    b.Navigation("Character");

                    b.Navigation("PenaltyLog");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Act", b =>
                {
                    b.Navigation("ActParts");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ActPart", b =>
                {
                    b.Navigation("CharacterActParts");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Card", b =>
                {
                    b.Navigation("BCards");

                    b.Navigation("StaticBuff");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Character", b =>
                {
                    b.Navigation("BazaarItem");

                    b.Navigation("CharacterActParts");

                    b.Navigation("CharacterQuest");

                    b.Navigation("CharacterRelation1");

                    b.Navigation("CharacterRelation2");

                    b.Navigation("CharacterSkill");

                    b.Navigation("FamilyCharacter");

                    b.Navigation("Inventory");

                    b.Navigation("Mail");

                    b.Navigation("Mail1");

                    b.Navigation("Mate");

                    b.Navigation("Miniland");

                    b.Navigation("QuicklistEntry");

                    b.Navigation("Respawn");

                    b.Navigation("StaticBonus");

                    b.Navigation("StaticBuff");

                    b.Navigation("Title");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Family", b =>
                {
                    b.Navigation("FamilyCharacters");

                    b.Navigation("FamilyLogs");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("NosCore.Database.Entities.InventoryItemInstance", b =>
                {
                    b.Navigation("MinilandObject");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Item", b =>
                {
                    b.Navigation("BCards");

                    b.Navigation("Drop");

                    b.Navigation("ItemInstances");

                    b.Navigation("Recipe");

                    b.Navigation("RecipeItem");

                    b.Navigation("RollGeneratedItem");

                    b.Navigation("RollGeneratedItem2");

                    b.Navigation("ShopItem");
                });

            modelBuilder.Entity("NosCore.Database.Entities.ItemInstance", b =>
                {
                    b.Navigation("BazaarItem");

                    b.Navigation("InventoryItemInstance");

                    b.Navigation("Mail");

                    b.Navigation("WarehouseItems");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Map", b =>
                {
                    b.Navigation("Character");

                    b.Navigation("MapMonster");

                    b.Navigation("MapNpc");

                    b.Navigation("MapTypeMap");

                    b.Navigation("Portal");

                    b.Navigation("Portal1");

                    b.Navigation("Respawn");

                    b.Navigation("RespawnMapType");

                    b.Navigation("ScriptedInstance");

                    b.Navigation("Teleporter");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MapNpc", b =>
                {
                    b.Navigation("Recipe");

                    b.Navigation("Shop");

                    b.Navigation("Teleporter");
                });

            modelBuilder.Entity("NosCore.Database.Entities.MapType", b =>
                {
                    b.Navigation("Drops");

                    b.Navigation("MapTypeMap");
                });

            modelBuilder.Entity("NosCore.Database.Entities.NpcMonster", b =>
                {
                    b.Navigation("BCards");

                    b.Navigation("Drop");

                    b.Navigation("MapMonster");

                    b.Navigation("MapNpc");

                    b.Navigation("Mate");

                    b.Navigation("NpcMonsterSkill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.NpcTalk", b =>
                {
                    b.Navigation("MapNpc");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Quest", b =>
                {
                    b.Navigation("CharacterQuest");

                    b.Navigation("QuestObjective");

                    b.Navigation("QuestQuestReward");
                });

            modelBuilder.Entity("NosCore.Database.Entities.QuestReward", b =>
                {
                    b.Navigation("QuestQuestReward");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeItem");
                });

            modelBuilder.Entity("NosCore.Database.Entities.RespawnMapType", b =>
                {
                    b.Navigation("MapTypes");

                    b.Navigation("MapTypes1");

                    b.Navigation("Respawn");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Script", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Shop", b =>
                {
                    b.Navigation("ShopItem");

                    b.Navigation("ShopSkill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Skill", b =>
                {
                    b.Navigation("BCards");

                    b.Navigation("CharacterSkill");

                    b.Navigation("Combo");

                    b.Navigation("NpcMonsterSkill");

                    b.Navigation("ShopSkill");
                });

            modelBuilder.Entity("NosCore.Database.Entities.Warehouse", b =>
                {
                    b.Navigation("WarehouseItems");
                });
#pragma warning restore 612, 618
        }
    }
}
